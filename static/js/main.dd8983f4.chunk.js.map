{"version":3,"sources":["components/step1.component.jsx","components/step2.component.jsx","components/step3.component.jsx","components/step4.component.jsx","components/menubar.component.jsx","App.js","serviceWorker.js","index.js"],"names":["StepOne","props","Form","useForm","form","useState","location","state","numberPeople","setNumberPeople","meal","setMeal","handleNextClick","alert","history","push","pathname","layout","onFinish","Item","initialValue","label","name","rules","required","message","onChange","value","map","item","index","Option","key","validator","_","Promise","resolve","reject","type","max","min","number","htmlType","StepTwo","data","dishes","restaurant","setRestaurant","datafakeRestaurant","dataRealRestaurant","element","availableMeals","filter","elem","pos","indexOf","style","display","justifyContent","onClick","dataNormal","StepThree","getFieldValue","setFieldsValue","dataDishes","dish","title","numOfServing","numServe","dataDish","finalDataSendandCheckDuplicateData","a","i","length","allData","arr","dataSend","e","undefined","test","users","userAdd","useEffect","onValuesChange","allValues","console","log","tendia","j","flex","id","List","fields","add","remove","field","marginBottom","align","fieldKey","marginRight","MinusCircleOutlined","marginTop","marginLeft","boxSizing","PlusCircleOutlined","StepFour","className","MenuBar","typeStep1","typeStep2","typeStep3","typeStep4","useLocation","split","App","basename","process","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.dd8983f4.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nimport { Form, InputNumber, Select, Button } from \"antd\";\r\n\r\nconst StepOne = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = () => {\r\n    handleNextClick();\r\n  }\r\n\r\n  const meals = [\r\n    {\r\n      value: \"1\",\r\n      label: \"breakfast\",\r\n    },\r\n    {\r\n      value: \"2\",\r\n      label: \"lunch\",\r\n    },\r\n    {\r\n      value: \"3\",\r\n      label: \"dinner\",\r\n    },\r\n  ];\r\n  const checkPrice = (rule, value) => {\r\n    debugger\r\n    if (value > 0 && value <= 10) {\r\n      return Promise.resolve();\r\n    }\r\n\r\n    return Promise.reject('Price must be greater than zero!');\r\n  };\r\n\r\n\r\n  const [numberPeople, setNumberPeople] = useState(\r\n    props.location && props.location.state && props.location.state.numberPeople\r\n      ? props.location.state.numberPeople\r\n      : \"\"\r\n  );\r\n\r\n  const [meal, setMeal] = useState(\r\n    props.location && props.location.state && props.location.state.meal\r\n      ? props.location.state.meal\r\n      : \"\"\r\n  );\r\n  const handleMealChange = (value) => {\r\n    setMeal(value);\r\n  };\r\n\r\n  const handleNumberPeopleChange = (number) => {\r\n\r\n    setNumberPeople(number);\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    if (meal === \"\" || numberPeople === null) {\r\n      alert(\"Please select a meal and a number of people\");\r\n    } else {\r\n      props.history.push({\r\n        pathname: `/step2/${meal}`,\r\n        state: { numberPeople: numberPeople, meal: meal },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form form={form} layout=\"vertical\" onFinish={onFinish}>\r\n      <Form.Item initialValue={meal} label=\"Please select a meal\" name=\"mealName\" rules={[{ required: true, message: 'Please select a meal!' }]}>\r\n        <Select onChange={handleMealChange}>\r\n          {meals.map((item, index) => (\r\n            <Select.Option key={index} value={item.label}>\r\n              {item.label}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n      <Form.Item\r\n        initialValue={numberPeople === \"\" ? setNumberPeople(1) : numberPeople}\r\n        label=\"Please Enter Number of people\" name=\"numberofPeople\"\r\n        rules={[\r\n          {\r\n            required: true,\r\n            message: 'Please select a number of people!',\r\n          },\r\n          () => ({\r\n            validator(_, value) {\r\n              if (value > 0 && value <= 10) {\r\n                return Promise.resolve();\r\n              }\r\n              return Promise.reject('The number of people must not be greater than 10!');\r\n            },\r\n          }),\r\n        ]}>\r\n        <InputNumber\r\n          type=\"number\"\r\n          max={10}\r\n          min={1}\r\n          onChange={handleNumberPeopleChange}\r\n        />\r\n      </Form.Item>\r\n      <Button type=\"primary\" htmlType=\"submit\">\r\n        Next\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default StepOne;\r\n","import React, { useState } from \"react\";\r\nimport { Form, Select, Button } from \"antd\";\r\nimport dishes from \"../data/dishes.json\";\r\n\r\nconst StepTwo = (props) => {\r\n  const [form] = Form.useForm();\r\n\r\n  const onFinish = () => {\r\n    handleNextClick();\r\n  }\r\n  const data = dishes.dishes;\r\n  const [restaurant, setRestaurant] = useState(\r\n    props.location && props.location.state && props.location.state.restaurant\r\n      ? props.location.state.restaurant\r\n      : \"\"\r\n  );\r\n\r\n  let datafakeRestaurant = [];\r\n  let dataRealRestaurant = [];\r\n  data.map((element) => {\r\n    for (let value of element.availableMeals) {\r\n      if (props.location.state.meal === value) {\r\n        datafakeRestaurant.push(element);\r\n      }\r\n    }\r\n  });\r\n\r\n  dataRealRestaurant = datafakeRestaurant.map((item) => item.restaurant);\r\n\r\n  dataRealRestaurant = dataRealRestaurant.filter(function (elem, pos) {\r\n    return dataRealRestaurant.indexOf(elem) === pos;\r\n  });\r\n\r\n  const handleRestaurantChange = (value) => {\r\n    setRestaurant(value);\r\n  };\r\n\r\n  const handleBackClick = () => {\r\n    props.history.push({\r\n      pathname: \"/\",\r\n      state: {\r\n        numberPeople: props.location.state.numberPeople,\r\n        meal: props.location.state.meal,\r\n      },\r\n    });\r\n  };\r\n\r\n  const handleNextClick = () => {\r\n    if (restaurant === \"\") {\r\n      alert(\"Please select a restaurant\");\r\n    } else {\r\n      props.history.push({\r\n        pathname: `/step3/${restaurant}`,\r\n        state: {\r\n          numberPeople: props.location.state.numberPeople,\r\n          meal: props.location.state.meal,\r\n          restaurant: restaurant,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form form={form} layout=\"vertical\" onFinish={onFinish}>\r\n      <Form.Item initialValue={restaurant} label=\"Please select a Restaurant\" name=\"restaurantName\" rules={[{ required: true, message: 'Please select a restaurant!' }]}>\r\n        <Select onChange={handleRestaurantChange}>\r\n          {dataRealRestaurant.map((item, index) => (\r\n            <Select.Option key={index} value={item}>\r\n              {item}\r\n            </Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Form.Item>\r\n\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n        <Button type=\"primary\" onClick={handleBackClick}>\r\n          Previous\r\n        </Button>\r\n        <Button type=\"primary\" htmlType=\"submit\" >\r\n          Next\r\n        </Button>\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default StepTwo;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Form, Select, Button, InputNumber, Space } from \"antd\";\r\nimport { MinusCircleOutlined, PlusCircleOutlined } from \"@ant-design/icons\";\r\n// import { GLOBAL } from '../constants'\r\nimport dishes from \"../data/dishes.json\";\r\n\r\n\r\n// const { set_3_data = {} } = GLOBAL || {}\r\nlet dataNormal = [];\r\nlet dataNormalCheck = [];\r\n\r\nconst StepThree = (props) => {\r\n    const [form] = Form.useForm();\r\n    const { getFieldValue, setFieldsValue } = form;\r\n\r\n    const onFinish = () => {\r\n        handleNextClick();\r\n    }\r\n\r\n    const handleDishChange = (value) => {\r\n        dish = value;\r\n    };\r\n    const handleNumOfServeChange = (number) => {\r\n        numOfServing = number;\r\n    };\r\n    const dataDishes =\r\n        props.location && props.location.state && props.location.state.dishes\r\n            ? props.location.state.dishes\r\n            : [];\r\n\r\n    let dish = props.location && props.location.state && props.location.state.dishes ? props.location.state.dishes[0].title : \"\";\r\n    let numOfServing = props.location && props.location.state && props.location.state.dishes ? props.location.state.dishes[0].numServe : 1;\r\n\r\n    //data dùng để render trong Select.Option\r\n    let data = dishes.dishes;\r\n    let dataDish = [];\r\n\r\n    data.map((element) => {\r\n        if (element.restaurant === props.location.state.restaurant) {\r\n            dataDish.push(element);\r\n        }\r\n    });\r\n\r\n    const handleBackClick = () => {\r\n        dataNormal = [];\r\n        props.history.push({\r\n            pathname: `/step2/${props.location.state.restaurant}`,\r\n            state: {\r\n                meal: props.location.state.meal,\r\n                numberPeople: props.location.state.numberPeople,\r\n                restaurant: props.location.state.restaurant,\r\n            },\r\n        });\r\n    };\r\n\r\n    const handleNextClick = () => {\r\n        const data = finalDataSendandCheckDuplicateData();\r\n        let a = 0;\r\n        for (let i = 0; i < data.length; i++) {\r\n            a += data[i].numServe\r\n        }\r\n        if (dish === \"\" || numOfServing === \"\" || numOfServing === null) {\r\n            alert(\"Select a dish and a number of servings \");\r\n        } else if (a < props.location.state.numberPeople) {\r\n            alert(\"Please select a disc number that matches your number of people\")\r\n        } else {\r\n\r\n            props.history.push({\r\n                pathname: `/step4/review`,\r\n                state: {\r\n                    numberPeople: props.location.state.numberPeople,\r\n                    meal: props.location.state.meal,\r\n                    restaurant: props.location.state.restaurant,\r\n                    dish: data,\r\n                },\r\n            });\r\n        }\r\n    };\r\n\r\n    // kiểm tra trùng title, khi trùng title thì cộng số lượng của numServe cho cái đầu tiên\r\n\r\n    const finalDataSendandCheckDuplicateData = () => {\r\n        // dataNormal = [{ title: dish, numServe: numOfServing }, ...dataNormal]\r\n        let allData = [{ title: dish, numServe: numOfServing }, ...dataNormal];\r\n        let arr = [];\r\n        let dataSend = [];\r\n\r\n        allData.map((e) => {\r\n            if (e === undefined) {\r\n                return;\r\n            }\r\n            else if (arr[e.title]) {\r\n                arr[e.title] += e.numServe;\r\n            } else arr[e.title] = e.numServe;\r\n        });\r\n\r\n        for (const key in arr) {\r\n            dataSend.push({\r\n                title: key,\r\n                numServe: arr[key],\r\n            });\r\n        }\r\n\r\n        // for (let i = 0; i < allData.length; i++) {\r\n        //     for (let j = 0; j < allData.length; j++) {\r\n        //         if (allData[i].title === allData[j].title) {\r\n        //             alert(\"khong duoc chon 2 mon trung nhau. Vui long chon mon khac\")\r\n        //             allData[j].title = ''\r\n        //         }\r\n        //     }\r\n        // }\r\n\r\n        return dataSend;\r\n    }\r\n\r\n    useEffect(() => {\r\n        for (let index = 1; index < dataDishes.length; index++) {\r\n            test({\r\n                title: dataDishes[index].title,\r\n                numServe: dataDishes[index].numServe,\r\n            })\r\n        }\r\n\r\n    }, [props.location, dataDishes])\r\n\r\n    function test(data = {}) {\r\n        const { users = [] } = getFieldValue()\r\n        const userAdd = [\r\n            ...users,\r\n        ]\r\n        userAdd.push(data)\r\n        setFieldsValue({\r\n            users: userAdd\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Form\r\n            form={form}\r\n            layout=\"vertical\"\r\n            onValuesChange={(_, allValues) => {\r\n                console.log(\"allValues\", allValues)\r\n                // clear dataNormal = {}\r\n\r\n                dataNormal = [];\r\n                dataNormalCheck = [];\r\n                if (typeof (allValues.users) !== 'undefined') {\r\n                    for (let i = 0; i < allValues.users.length; i++) {\r\n                        if (allValues.users[i] && allValues.users[i].title && allValues.users[i].title === allValues.tendia) {\r\n                            alert(\"khong duoc chon 2 mon trung nhau. Vui long chon mon khac\");\r\n                            allValues.users[i].title = '';\r\n                        }\r\n                        else {\r\n                            for (let j = i + 1; j <= allValues.users.length; j++) {\r\n                                if (allValues.users[i] && allValues.users[i].title && allValues.users[i].title === '') {\r\n                                    alert('Vui long chon mon');\r\n                                    return\r\n                                }\r\n                                if (allValues.users[i] && allValues.users[i].title && allValues.users[j] && allValues.users[j].title && allValues.users[i].title === allValues.users[j].title) {\r\n\r\n                                    alert(\"khong duoc chon 2 mon trung nhau. Vui long chon mon khac\");\r\n                                    allValues.users[j].title = '';\r\n                                }\r\n                            }\r\n                            dataNormal = allValues.users;\r\n                            console.log(\"dataNormal\", dataNormal);\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }}\r\n            onFinish={onFinish}\r\n        >\r\n            <div\r\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n            >\r\n                <Form.Item initialValue={dish} label=\"Please select a dish\" style={{ flex: 0.95 }} name=\"tendia\" rules={[{ required: true, message: 'Please select a dish!' }]} >\r\n                    <Select onChange={handleDishChange}>\r\n                        {dataDish.map((item) => (\r\n                            <Select.Option key={item.id} value={item.name}>\r\n                                {item.name}\r\n                            </Select.Option>\r\n                        ))}\r\n                    </Select>\r\n                </Form.Item>\r\n                <Form.Item\r\n                    initialValue={numOfServing}\r\n                    label=\"Please enter no of servings\"\r\n                    name=\"soluong\"\r\n                    rules={[{\r\n                        required: true, message: 'Please select a number of serving!'\r\n                    },\r\n                    () => ({\r\n                        validator(_, value) {\r\n                            if (value > 0 && value <= 10) {\r\n                                return Promise.resolve();\r\n                            }\r\n                            return Promise.reject('Cannot be greater than 10!');\r\n                        },\r\n                    })\r\n                    ]}\r\n                >\r\n                    <InputNumber\r\n                        type=\"number\"\r\n                        max={10}\r\n                        min={1}\r\n                        onChange={handleNumOfServeChange}\r\n                    />\r\n                </Form.Item>\r\n            </div>\r\n            <Form.List name=\"users\"   >\r\n                {(fields, { add, remove }) => {\r\n                    return (\r\n                        <div>\r\n                            {\r\n                                fields.map((field) => (\r\n                                    <Space\r\n                                        key={field.key}\r\n                                        style={{ display: \"flex\", marginBottom: 8 }}\r\n                                        align=\"start\"\r\n                                    >\r\n                                        <Form.Item\r\n                                            label=\"Please select a dish\"\r\n                                            {...field}\r\n                                            name={[field.name, \"title\"]}\r\n                                            fieldKey={[field.fieldKey, \"title\"]}\r\n                                            style={{ flex: \"0.95\", marginRight: \"8px\" }}\r\n                                            rules={[{ required: true, message: 'Please choose the dish!' }]}\r\n\r\n                                        >\r\n                                            <Select>\r\n                                                {dataDish.map((item) => (\r\n                                                    <Select.Option key={item.id} value={item.name}>\r\n                                                        {\" \"}\r\n                                                        {item.name}{\" \"}\r\n                                                    </Select.Option>\r\n                                                ))}\r\n                                            </Select>\r\n                                        </Form.Item>\r\n                                        <Form.Item\r\n                                            {...field}\r\n                                            label=\"Please enter no of servings\"\r\n                                            name={[field.name, \"numServe\"]}\r\n                                            fieldKey={[field.fieldKey, \"numServe\"]}\r\n                                            rules={[{ required: true, message: 'Please select a number!' }, () => ({\r\n                                                validator(_, value) {\r\n                                                    if (value > 0 && value <= 10) {\r\n                                                        return Promise.resolve();\r\n                                                    }\r\n                                                    return Promise.reject('Cannot be greater than 10');\r\n                                                },\r\n                                            })]}\r\n                                            initialValue={1}\r\n                                        >\r\n                                            <InputNumber type=\"number\" max={10} min={1} />\r\n                                        </Form.Item>\r\n\r\n                                        <Form.Item>\r\n                                            <MinusCircleOutlined\r\n                                                style={{\r\n                                                    marginTop: \"16px\",\r\n                                                    marginLeft: \"16px\",\r\n                                                    boxSizing: \"border\",\r\n                                                }}\r\n                                                onClick={() => {\r\n                                                    remove(field.name);\r\n                                                }}\r\n                                            />\r\n                                        </Form.Item>\r\n                                    </Space>\r\n                                ))}\r\n\r\n                            <Form.Item>\r\n                                <PlusCircleOutlined onClick={() => add()} />\r\n                            </Form.Item>\r\n                        </div>\r\n                    );\r\n                }}\r\n            </Form.List>\r\n\r\n            <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n                <Button type=\"primary\" onClick={handleBackClick}>\r\n                    Previous\r\n                </Button>\r\n                <Button type=\"primary\" htmlType=\"submit\">\r\n                    Next\r\n                </Button>\r\n            </div>\r\n        </Form>\r\n    );\r\n};\r\n\r\nexport default StepThree;\r\n\r\n/* <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                <Form.Item label=\"Please select a dish\" style={{ flex: 0.95 }}>\r\n                                        <Select value={dish} onChange={handleDishChange}>\r\n                                                {\r\n                                                        dataDish.map(item => (\r\n                                                                <Select.Option key={item.id} value={item.name} >{item.name}</Select.Option>\r\n                                                        ))\r\n                                                }\r\n                                        </Select>\r\n                                </Form.Item>\r\n                                <Form.Item label=\"Please enter no of servings\">\r\n                                        <InputNumber value={numOfServing === '' ? setNumOfServing(1) : numOfServing} max={10} min={0} onChange={handleNumOfServeChange} />\r\n                                </Form.Item>\r\n                        </div>\r\n                        <Form.List name=\"users\">\r\n                                {(fields, { add, remove }) => {\r\n                                        return (\r\n                                                <div>\r\n                                                        {fields.map((field) => (\r\n                                                                <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                                                                        <Form.Item label=\"Please select a dish\" style={{ flex: 0.95 }} {...field}>\r\n                                                                                <Select value={dish} onChange={handleDishChange}>\r\n                                                                                        {\r\n                                                                                                dataDish.map(item => (\r\n                                                                                                        <Select.Option key={item.id} value={item.name} >{item.name}</Select.Option>\r\n                                                                                                ))\r\n                                                                                        }\r\n                                                                                </Select>\r\n                                                                        </Form.Item>\r\n                                                                        <Form.Item {...field} label=\"Please enter no of servings\">\r\n                                                                                <InputNumber value={numOfServing === '' ? setNumOfServing(1) : numOfServing} max={10} min={0} onChange={handleNumOfServeChange} />\r\n                                                                                <MinusCircleOutlined\r\n                                                                                        style={{ marginLeft: '10px' }}\r\n                                                                                        onClick={() => {\r\n                                                                                                remove(field.name);\r\n                                                                                        }}\r\n                                                                                />\r\n                                                                        </Form.Item>\r\n\r\n                                                                </div>\r\n                                                        ))}\r\n                                                        <Form.Item>\r\n                                                                <PlusCircleOutlined onClick={() => add()} />\r\n                                                        </Form.Item>\r\n                                                </div>\r\n                                        );\r\n                                }}\r\n                        </Form.List> */\r\n","import { Button, Form } from 'antd';\r\nimport React from 'react';\r\n\r\nconst StepFour = (props) => {\r\n    const [form] = Form.useForm();\r\n\r\n    const { restaurant, meal, dish, numberPeople } = props.location.state;\r\n\r\n    const handleBackClick = () => {\r\n        props.history.push({\r\n            pathname: `/step3/${props.location.state.restaurant}`,\r\n            state: {\r\n                meal: props.location.state.meal,\r\n                restaurant: props.location.state.restaurant,\r\n                numberPeople: props.location.state.numberPeople,\r\n                dishes: dish,\r\n            }\r\n        })\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        alert(\"Thank you for using our services!!\")\r\n    }\r\n    return (\r\n        <div>\r\n            <Form\r\n                form={form}\r\n                className=\"ant-form-customize\"\r\n            >\r\n                <div> Meal: <span>{meal}</span> </div>\r\n                <div> No of People: <span>{numberPeople}</span> </div>\r\n                <div> Restaurant: <span>{restaurant}</span> </div>\r\n                <div className=\"dish-title\" > <span>Dishes:</span> <ul className=\"review-dish\"> {dish.map((item, index) => (\r\n                    <li key={index}> <span> {item.title} </span> - <span> {item.numServe} </span>  </li>\r\n                ))}\r\n                </ul>\r\n                </div>\r\n            </Form>\r\n            <div className=\"buttons\">\r\n                <Button type=\"primary\" onClick={handleBackClick}> Previous </Button>\r\n                <Button type=\"primary\" onClick={handleSubmit}> Submit </Button>\r\n            </div>\r\n        </div >\r\n\r\n    )\r\n}\r\n\r\nexport default StepFour;","import React, { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport { Button } from \"antd\";\r\n\r\nconst MenuBar = (props) => {\r\n  let typeStep1 = \"\";\r\n  let typeStep2 = \"\";\r\n  let typeStep3 = \"\";\r\n  let typeStep4 = \"\";\r\n  let location = useLocation();\r\n\r\n  useEffect(() => { }, [location]);\r\n  const { pathname = \"\" } = location || {};\r\n  const pathStep = pathname.split(\"/\")[1];\r\n  switch (pathStep) {\r\n    case \"step2\":\r\n      typeStep2 = \"primary\";\r\n      break;\r\n    case \"step3\":\r\n      typeStep3 = \"primary\";\r\n      break;\r\n    case \"step4\":\r\n      typeStep4 = \"primary\";\r\n      break;\r\n    default:\r\n      typeStep1 = \"primary\";\r\n  }\r\n  return (\r\n    <div className=\"tab-bar\" >\r\n      <Button type={typeStep1}> Step 1 </Button>\r\n      <Button type={typeStep2}> Step 2 </Button>\r\n      <Button type={typeStep3}> Step 3 </Button>\r\n      <Button type={typeStep4}> Review </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MenuBar;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Route } from \"react-router-dom\";\r\n// import { Prompt } from 'react-router'\r\n\r\nimport StepOne from \"./components/step1.component\";\r\nimport StepTwo from \"./components/step2.component\";\r\nimport StepThree from \"./components/step3.component\";\r\nimport StepFour from \"./components/step4.component\";\r\n\r\nimport \"./App.css\";\r\nimport MenuBar from \"./components/menubar.component\";\r\n\r\nfunction App() {\r\n\r\n  // useEffect(() => {\r\n  //   if (shouldBlockNavigation) {\r\n  //     window.onbeforeunload = () => true\r\n  //   } else {\r\n  //     window.onbeforeunload = undefined\r\n  //   }\r\n  // }, [])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <MenuBar />\r\n        <Route exact path=\"/\" component={StepOne} />\r\n        <Route path=\"/step2/:id\" component={StepTwo} />\r\n        <Route path=\"/step3/:id\" component={StepThree} />\r\n        <Route path=\"/step4/review\" component={StepFour} />\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import { Beforeunload, useBeforeunload } from 'react-beforeunload';\n\n\nReactDOM.render(\n  <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}